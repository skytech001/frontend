{"ast":null,"code":"// import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\n// import axios from \"axios\";\n\n// export const orderDetails = createAsyncThunk(\n//   \"detailOrder/orderDetails\",\n//   async (orderId, { getState }) => {\n//     const state = getState();\n//     const userInfo = state.signin.userInfo;\n\n//     try {\n//       const response = await axios.get(\n//         `http://localhost:5000/orders/${orderId}`,\n//         {\n//           headers: {\n//             authorization: `Bearer ${userInfo.token}`,\n//           },\n//         }\n//       );\n//       return response.data;\n//     } catch (error) {\n//       const message =\n//         error.response && error.response.data.message\n//           ? error.response.data.message\n//           : error.message;\n//       return message;\n//     }\n//   }\n// );\n\n// const orderSlice = createSlice({\n//   name: \"detailOrder\",\n//   initialState: {\n//     detailLoading: true,\n//     detailError: \"\",\n//     detailedOrder: \"\",\n//   },\n//   reducers: {\n//     resetdetailedOrders: (state) => {\n//       state.detailedOrder = [];\n//     },\n//   },\n//   extraReducers(builder) {\n//     builder\n//       .addCase(orderDetails.pending, (state) => {\n//         state.detailLoading = true;\n//       })\n//       .addCase(orderDetails.fulfilled, (state, action) => {\n//         state.detailLoading = false;\n//         state.detailedOrder = action.payload;\n//       })\n//       .addCase(orderDetails.rejected, (state, action) => {\n//         state.detailLoading = false;\n//         state.detailError = action.payload;\n//       });\n//   },\n// });\n\n// export default orderSlice.reducer;\n// export const { resetdetailedOrders } = orderSlice.actions;","map":{"version":3,"names":[],"sources":["C:/Users/abiod/Desktop/frontend/src/features/orderSlice.js"],"sourcesContent":["// import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\n// import axios from \"axios\";\r\n\r\n// export const orderDetails = createAsyncThunk(\r\n//   \"detailOrder/orderDetails\",\r\n//   async (orderId, { getState }) => {\r\n//     const state = getState();\r\n//     const userInfo = state.signin.userInfo;\r\n\r\n//     try {\r\n//       const response = await axios.get(\r\n//         `http://localhost:5000/orders/${orderId}`,\r\n//         {\r\n//           headers: {\r\n//             authorization: `Bearer ${userInfo.token}`,\r\n//           },\r\n//         }\r\n//       );\r\n//       return response.data;\r\n//     } catch (error) {\r\n//       const message =\r\n//         error.response && error.response.data.message\r\n//           ? error.response.data.message\r\n//           : error.message;\r\n//       return message;\r\n//     }\r\n//   }\r\n// );\r\n\r\n// const orderSlice = createSlice({\r\n//   name: \"detailOrder\",\r\n//   initialState: {\r\n//     detailLoading: true,\r\n//     detailError: \"\",\r\n//     detailedOrder: \"\",\r\n//   },\r\n//   reducers: {\r\n//     resetdetailedOrders: (state) => {\r\n//       state.detailedOrder = [];\r\n//     },\r\n//   },\r\n//   extraReducers(builder) {\r\n//     builder\r\n//       .addCase(orderDetails.pending, (state) => {\r\n//         state.detailLoading = true;\r\n//       })\r\n//       .addCase(orderDetails.fulfilled, (state, action) => {\r\n//         state.detailLoading = false;\r\n//         state.detailedOrder = action.payload;\r\n//       })\r\n//       .addCase(orderDetails.rejected, (state, action) => {\r\n//         state.detailLoading = false;\r\n//         state.detailError = action.payload;\r\n//       });\r\n//   },\r\n// });\r\n\r\n// export default orderSlice.reducer;\r\n// export const { resetdetailedOrders } = orderSlice.actions;\r\n"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}