{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\n\n// export const orderPayment = createAsyncThunk(\n//   \"paymentSlice/orderPayment\",\n//   async (data, { getState }) => {\n//     console.log(data);\n//     const state = getState();\n//     const userInfo = state.signin.userInfo;\n//     const orderId = data.orderId;\n//     const details = data.details;\n//     console.log(orderId, details);\n//     try {\n//       const response = await axios.put(\n//         `http://localhost:5000/orders/${orderId}/pay`,\n//         details,\n//         {\n//           headers: {\n//             authorization: `Bearer ${userInfo.token}`,\n//           },\n//         }\n//       );\n//       return response.data;\n//     } catch (error) {\n//       const message =\n//         error.response && error.response.data.message\n//           ? error.response.data.message\n//           : error.message;\n//       return message;\n//     }\n//   }\n// );\n\nconst paymentSlice = createSlice({\n  name: \"payment\",\n  initialState: {\n    paymentMethod: \"\"\n    // paymentLoading: false,\n    // paymentSuccess: false,\n    // paymentFailed: \"\",\n    // paymentData: \"\",\n  },\n\n  reducers: {\n    savePaymentMethod: (state, _ref) => {\n      let {\n        payload\n      } = _ref;\n      state.paymentMethod = payload;\n    },\n    paymentReset: state => {\n      state.paymentLoading = false;\n      state.paymentSuccess = false;\n    }\n  }\n  // extraReducers(builder) {\n  //   builder\n  //     .addCase(orderPayment.pending, (state) => {\n  //       state.ppaymentLoading = true;\n  //     })\n  //     .addCase(orderPayment.fulfilled, (state, action) => {\n  //       state.paymentLoading = false;\n  //       state.paymentSuccess = \"Order is paid\";\n  //       state.paymentData = action.payload;\n  //       console.log(action.payload);\n  //     })\n  //     .addCase(orderPayment.rejected, (state, action) => {\n  //       state.paymentLoading = false;\n  //       state.paymentFailed = action.payload;\n  //       console.log(action.payload);\n  //     });\n  // },\n});\n\nexport default paymentSlice.reducer;\nexport const {\n  savePaymentMethod,\n  paymentReset\n} = paymentSlice.actions;","map":{"version":3,"names":["createAsyncThunk","createSlice","axios","paymentSlice","name","initialState","paymentMethod","reducers","savePaymentMethod","state","payload","paymentReset","paymentLoading","paymentSuccess","reducer","actions"],"sources":["C:/Users/abiod/Desktop/frontend/src/features/paymentSlice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\nimport axios from \"axios\";\r\n\r\n// export const orderPayment = createAsyncThunk(\r\n//   \"paymentSlice/orderPayment\",\r\n//   async (data, { getState }) => {\r\n//     console.log(data);\r\n//     const state = getState();\r\n//     const userInfo = state.signin.userInfo;\r\n//     const orderId = data.orderId;\r\n//     const details = data.details;\r\n//     console.log(orderId, details);\r\n//     try {\r\n//       const response = await axios.put(\r\n//         `http://localhost:5000/orders/${orderId}/pay`,\r\n//         details,\r\n//         {\r\n//           headers: {\r\n//             authorization: `Bearer ${userInfo.token}`,\r\n//           },\r\n//         }\r\n//       );\r\n//       return response.data;\r\n//     } catch (error) {\r\n//       const message =\r\n//         error.response && error.response.data.message\r\n//           ? error.response.data.message\r\n//           : error.message;\r\n//       return message;\r\n//     }\r\n//   }\r\n// );\r\n\r\nconst paymentSlice = createSlice({\r\n  name: \"payment\",\r\n  initialState: {\r\n    paymentMethod: \"\",\r\n    // paymentLoading: false,\r\n    // paymentSuccess: false,\r\n    // paymentFailed: \"\",\r\n    // paymentData: \"\",\r\n  },\r\n  reducers: {\r\n    savePaymentMethod: (state, { payload }) => {\r\n      state.paymentMethod = payload;\r\n    },\r\n    paymentReset: (state) => {\r\n      state.paymentLoading = false;\r\n      state.paymentSuccess = false;\r\n    },\r\n  },\r\n  // extraReducers(builder) {\r\n  //   builder\r\n  //     .addCase(orderPayment.pending, (state) => {\r\n  //       state.ppaymentLoading = true;\r\n  //     })\r\n  //     .addCase(orderPayment.fulfilled, (state, action) => {\r\n  //       state.paymentLoading = false;\r\n  //       state.paymentSuccess = \"Order is paid\";\r\n  //       state.paymentData = action.payload;\r\n  //       console.log(action.payload);\r\n  //     })\r\n  //     .addCase(orderPayment.rejected, (state, action) => {\r\n  //       state.paymentLoading = false;\r\n  //       state.paymentFailed = action.payload;\r\n  //       console.log(action.payload);\r\n  //     });\r\n  // },\r\n});\r\n\r\nexport default paymentSlice.reducer;\r\nexport const { savePaymentMethod, paymentReset } = paymentSlice.actions;\r\n"],"mappings":"AAAA,SAASA,gBAAgB,EAAEC,WAAW,QAAQ,kBAAkB;AAChE,OAAOC,KAAK,MAAM,OAAO;;AAEzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,YAAY,GAAGF,WAAW,CAAC;EAC/BG,IAAI,EAAE,SAAS;EACfC,YAAY,EAAE;IACZC,aAAa,EAAE;IACf;IACA;IACA;IACA;EACF,CAAC;;EACDC,QAAQ,EAAE;IACRC,iBAAiB,EAAE,CAACC,KAAK,WAAkB;MAAA,IAAhB;QAAEC;MAAQ,CAAC;MACpCD,KAAK,CAACH,aAAa,GAAGI,OAAO;IAC/B,CAAC;IACDC,YAAY,EAAGF,KAAK,IAAK;MACvBA,KAAK,CAACG,cAAc,GAAG,KAAK;MAC5BH,KAAK,CAACI,cAAc,GAAG,KAAK;IAC9B;EACF;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACF,CAAC,CAAC;;AAEF,eAAeV,YAAY,CAACW,OAAO;AACnC,OAAO,MAAM;EAAEN,iBAAiB;EAAEG;AAAa,CAAC,GAAGR,YAAY,CAACY,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}