{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nexport const orderPayment = createAsyncThunk(\"paymentSlice/orderPayment\", async (details, _ref) => {\n  let {\n    getState\n  } = _ref;\n  const state = getState();\n  const userInfo = state.signin.userInfo;\n  const orderId = order.id;\n  console.log(orderId);\n  try {\n    const response = await axios.put(`http://localhost:5000/orders/${orderId}/pay`, details, {\n      headers: {\n        authorization: `Bearer ${userInfo.token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n    return message;\n  }\n});\nconst paymentSlice = createSlice({\n  name: \"payment\",\n  initialState: {\n    paymentMethod: \"\",\n    paymentLoading: false,\n    paymentSuccess: \"\",\n    paymentFailed: \"\",\n    paymentData: \"\"\n  },\n  reducers: {\n    savePaymentMethod: (state, _ref2) => {\n      let {\n        payload\n      } = _ref2;\n      state.paymentMethod = payload;\n    }\n  },\n  extraReducers(builder) {\n    builder.addCase(orderPayment.pending, state => {\n      state.pending = true;\n    }).addCase(orderPayment.fulfilled, (state, action) => {\n      state.paymentLoading = false;\n      state.paymentSuccess = true;\n      state.paymentData = action.payload;\n      console.log(action.payload);\n    }).addCase(orderPayment.rejected, (state, action) => {\n      state.paymentLoading = false;\n      state.paymentFailed = action.payload;\n      console.log(action.payload);\n    });\n  }\n});\nexport default paymentSlice.reducer;\nexport const {\n  savePaymentMethod\n} = paymentSlice.actions;","map":{"version":3,"names":["createAsyncThunk","createSlice","axios","orderPayment","details","getState","state","userInfo","signin","orderId","order","id","console","log","response","put","headers","authorization","token","data","error","message","paymentSlice","name","initialState","paymentMethod","paymentLoading","paymentSuccess","paymentFailed","paymentData","reducers","savePaymentMethod","payload","extraReducers","builder","addCase","pending","fulfilled","action","rejected","reducer","actions"],"sources":["C:/Users/abiod/Desktop/frontend/src/features/paymentSlice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\nimport axios from \"axios\";\r\n\r\nexport const orderPayment = createAsyncThunk(\r\n  \"paymentSlice/orderPayment\",\r\n  async (details, { getState }) => {\r\n    const state = getState();\r\n    const userInfo = state.signin.userInfo;\r\n    const orderId = order.id;\r\n    console.log(orderId);\r\n    try {\r\n      const response = await axios.put(\r\n        `http://localhost:5000/orders/${orderId}/pay`,\r\n        details,\r\n        {\r\n          headers: {\r\n            authorization: `Bearer ${userInfo.token}`,\r\n          },\r\n        }\r\n      );\r\n      return response.data;\r\n    } catch (error) {\r\n      const message =\r\n        error.response && error.response.data.message\r\n          ? error.response.data.message\r\n          : error.message;\r\n      return message;\r\n    }\r\n  }\r\n);\r\n\r\nconst paymentSlice = createSlice({\r\n  name: \"payment\",\r\n  initialState: {\r\n    paymentMethod: \"\",\r\n    paymentLoading: false,\r\n    paymentSuccess: \"\",\r\n    paymentFailed: \"\",\r\n    paymentData: \"\",\r\n  },\r\n  reducers: {\r\n    savePaymentMethod: (state, { payload }) => {\r\n      state.paymentMethod = payload;\r\n    },\r\n  },\r\n  extraReducers(builder) {\r\n    builder\r\n      .addCase(orderPayment.pending, (state) => {\r\n        state.pending = true;\r\n      })\r\n      .addCase(orderPayment.fulfilled, (state, action) => {\r\n        state.paymentLoading = false;\r\n        state.paymentSuccess = true;\r\n        state.paymentData = action.payload;\r\n        console.log(action.payload);\r\n      })\r\n      .addCase(orderPayment.rejected, (state, action) => {\r\n        state.paymentLoading = false;\r\n        state.paymentFailed = action.payload;\r\n        console.log(action.payload);\r\n      });\r\n  },\r\n});\r\n\r\nexport default paymentSlice.reducer;\r\nexport const { savePaymentMethod } = paymentSlice.actions;\r\n"],"mappings":"AAAA,SAASA,gBAAgB,EAAEC,WAAW,QAAQ,kBAAkB;AAChE,OAAOC,KAAK,MAAM,OAAO;AAEzB,OAAO,MAAMC,YAAY,GAAGH,gBAAgB,CAC1C,2BAA2B,EAC3B,OAAOI,OAAO,WAAmB;EAAA,IAAjB;IAAEC;EAAS,CAAC;EAC1B,MAAMC,KAAK,GAAGD,QAAQ,EAAE;EACxB,MAAME,QAAQ,GAAGD,KAAK,CAACE,MAAM,CAACD,QAAQ;EACtC,MAAME,OAAO,GAAGC,KAAK,CAACC,EAAE;EACxBC,OAAO,CAACC,GAAG,CAACJ,OAAO,CAAC;EACpB,IAAI;IACF,MAAMK,QAAQ,GAAG,MAAMZ,KAAK,CAACa,GAAG,CAC7B,gCAA+BN,OAAQ,MAAK,EAC7CL,OAAO,EACP;MACEY,OAAO,EAAE;QACPC,aAAa,EAAG,UAASV,QAAQ,CAACW,KAAM;MAC1C;IACF,CAAC,CACF;IACD,OAAOJ,QAAQ,CAACK,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,MAAMC,OAAO,GACXD,KAAK,CAACN,QAAQ,IAAIM,KAAK,CAACN,QAAQ,CAACK,IAAI,CAACE,OAAO,GACzCD,KAAK,CAACN,QAAQ,CAACK,IAAI,CAACE,OAAO,GAC3BD,KAAK,CAACC,OAAO;IACnB,OAAOA,OAAO;EAChB;AACF,CAAC,CACF;AAED,MAAMC,YAAY,GAAGrB,WAAW,CAAC;EAC/BsB,IAAI,EAAE,SAAS;EACfC,YAAY,EAAE;IACZC,aAAa,EAAE,EAAE;IACjBC,cAAc,EAAE,KAAK;IACrBC,cAAc,EAAE,EAAE;IAClBC,aAAa,EAAE,EAAE;IACjBC,WAAW,EAAE;EACf,CAAC;EACDC,QAAQ,EAAE;IACRC,iBAAiB,EAAE,CAACzB,KAAK,YAAkB;MAAA,IAAhB;QAAE0B;MAAQ,CAAC;MACpC1B,KAAK,CAACmB,aAAa,GAAGO,OAAO;IAC/B;EACF,CAAC;EACDC,aAAa,CAACC,OAAO,EAAE;IACrBA,OAAO,CACJC,OAAO,CAAChC,YAAY,CAACiC,OAAO,EAAG9B,KAAK,IAAK;MACxCA,KAAK,CAAC8B,OAAO,GAAG,IAAI;IACtB,CAAC,CAAC,CACDD,OAAO,CAAChC,YAAY,CAACkC,SAAS,EAAE,CAAC/B,KAAK,EAAEgC,MAAM,KAAK;MAClDhC,KAAK,CAACoB,cAAc,GAAG,KAAK;MAC5BpB,KAAK,CAACqB,cAAc,GAAG,IAAI;MAC3BrB,KAAK,CAACuB,WAAW,GAAGS,MAAM,CAACN,OAAO;MAClCpB,OAAO,CAACC,GAAG,CAACyB,MAAM,CAACN,OAAO,CAAC;IAC7B,CAAC,CAAC,CACDG,OAAO,CAAChC,YAAY,CAACoC,QAAQ,EAAE,CAACjC,KAAK,EAAEgC,MAAM,KAAK;MACjDhC,KAAK,CAACoB,cAAc,GAAG,KAAK;MAC5BpB,KAAK,CAACsB,aAAa,GAAGU,MAAM,CAACN,OAAO;MACpCpB,OAAO,CAACC,GAAG,CAACyB,MAAM,CAACN,OAAO,CAAC;IAC7B,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,eAAeV,YAAY,CAACkB,OAAO;AACnC,OAAO,MAAM;EAAET;AAAkB,CAAC,GAAGT,YAAY,CAACmB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}